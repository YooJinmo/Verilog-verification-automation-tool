name: Verilog Verification Automation

on:
  schedule:
    - cron: "*/1 * * * *"  # 매 1분마다 실행
  workflow_dispatch:  # 수동 실행 가능

jobs:
  run_verification:
    runs-on: ubuntu-latest

    steps:
    - name: 저장소 체크아웃
      uses: actions/checkout@v4

    - name: Install Icarus Verilog
      run: sudo apt-get update && sudo apt-get install -y iverilog  # iverilog 설치
      
    - name: Python 환경 설정
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"

    - name: 필요한 패키지 설치
      run: |
        sudo apt update
        sudo apt install -y iverilog cpp
        pip install pyverilog

    - name: input.txt generate
      run: python generate_input.py

    - name: input.txt 파일 git에 추가(커밋 및 푸시)
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions@github.com"
        git add input.txt # input.txt를 github에 추가
        git commit -m "Update input.txt (auto)" # 변경 사항이 있을 경우 commit
        git push --force
        
    - name: Full Adder Python 실행
      run: python run_python_adder.py
    
    - name: python_output.txt 파일 git에 추가(커밋 및 푸시)
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions@github.com"
        git add python_output.txt # python_output.txt를 github에 추가
        git commit -m "Update python_output.txt (auto)" # 변경 사항이 있을 경우 commit
        git push --force
    

    - name:  Run Verilog
      run: iverilog -o adder_sim adder.v adder8.v adder_tb.v  # Verilog 컴파일

    - name: Run Verilog Simulation
      run: vvp adder_sim  # 시뮬레이션 실행

    - name: Upload Simulation Output
      uses: actions/upload-artifact@v4
      with:
        name: simulation-output
        path: verilog_output.txt  # GitHub Actions에서 실행된 결과를 다운로드 가능하게 저장

    - name: verilog_output.txt 파일 git에 추가(커밋 및 푸시)
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions@github.com"
        git add verilog_output.txt # verilog_output.txt를 github에 추가
        git commit -m "Update verilog_output.txt (auto)" # 변경 사항이 있을 경우 commit
        git push --force

    - name: 결과 비교
      run: python compare_files.py

    - name: 결과를 csv 파일로 저장
      run: python txt_to_csv.py
      
    - name: 변경 사항 커밋 및 푸시
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions@github.com"
        git add comparison_output.csv # 비교 결과 데이터 csv를 github에 추가
        git commit -m "Update result.csv (auto)" # 변경 사항이 있을 경우 commit
        git push # 변경 사항을 git에 push

      continue-on-error: true #파일 변경이 없을 경우 오류 무시
      
